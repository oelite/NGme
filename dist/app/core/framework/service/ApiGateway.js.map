{"version":3,"file":"ApiGateway.js","sourceRoot":"","sources":["../../../../Volumes/Data/OElite/cosmos/public/OEme/tmp/broccoli_type_script_compiler-input_base_path-1mTS1K7M.tmp/0/src/app/core/framework/service/ApiGateway.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, Inject} from \"@angular/core\";\nimport {Response, RequestOptions, RequestMethod, URLSearchParams, Headers, Http} from \"@angular/http\";\nimport {Subject, Observable} from \"rxjs/Rx\";\nimport {CookieService} from \"angular2-cookie/core\";\n/**\n * Created by mleader1 on 29/06/2016.\n * The code was adapted from\n *      https://blog.sstorie.com/adapting-ben-nadels-apigateway-to-pure-typescript/\n *\n */\n\n// Import the rxjs operators we need (in a production app you'll\n//  probably want to import only the operators you actually use)\n//\nexport class ApiGatewayOptions {\n    method: RequestMethod;\n    url: string;\n    headers = {};\n    params = {};\n    data = {};\n    contentType: ApiContentType = ApiContentType.Json;\n}\nexport enum ApiContentType{\n    Json = 0,\n    WwwForm = 10\n}\n\n\n@Injectable()\nexport class ApiGateway {\n\n    public CurrentUser_AuthToken: string = 'oe.users.currentUserAuthToken';\n    public CurrentUser_TimeStamp: string = 'oe.users.currentUserTimeStamp';\n\n\n    public get UserAuthToken(): string {\n        if (this.UserTimeStamp)\n            return localStorage.getItem(this.CurrentUser_AuthToken);\n        else\n            return null;\n    }\n\n    public get UserTimeStamp(): Date {\n        return <Date>this.cookies.getObject(this.CurrentUser_TimeStamp);\n    }\n\n    public set UserTimeStamp(value: Date) {\n        if (value)\n            this.cookies.putObject(this.CurrentUser_TimeStamp, value);\n        else\n            this.cookies.remove(this.CurrentUser_TimeStamp);\n    }\n\n\n    public set UserAuthToken(value: string) {\n        localStorage.setItem(this.CurrentUser_AuthToken, value);\n    }\n\n    // Define the internal Subject we'll use to push errors\n    private errorsSubject = new Subject<any>();\n\n    // Provide the *public* Observable that clients can subscribe to\n    errors$: Observable<any>;\n\n    // Define the internal Subject we'll use to push the command count\n    private pendingCommandsSubject = new Subject<number>();\n    private pendingCommandCount = 0;\n\n    // Provide the *public* Observable that clients can subscribe to\n    pendingCommands$: Observable<number>;\n\n    constructor(@Inject(Http) protected http: Http, @Inject(CookieService) protected  cookies: CookieService) {\n        // Create our observables from the subjects\n        this.errors$ = this.errorsSubject.asObservable();\n        this.pendingCommands$ = this.pendingCommandsSubject.asObservable();\n    }\n\n    // I perform a GET request to the API, appending the given params\n    // as URL search parameters. Returns a stream.\n    get(url: string, params: any, headers?: any, contentType?: ApiContentType): Observable<any> {\n        let options = new ApiGatewayOptions();\n        options.method = RequestMethod.Get;\n        options.url = url;\n        options.params = params;\n        options.headers = headers;\n        options.contentType = contentType || ApiContentType.Json;\n\n        return this.request(options);\n    }\n\n\n    // I perform a POST request to the API. If both the params and data\n    // are present, the params will be appended as URL search parameters\n    // and the data will be serialized as a JSON payload. If only the\n    // data is present, it will be serialized as a JSON payload. Returns\n    // a stream.\n    post(url: string, params: any, data: any, headers?: any, contentType?: ApiContentType): Observable<any> {\n        if (!data) {\n            data = params;\n            params = {};\n        }\n        let options = new ApiGatewayOptions();\n        options.method = RequestMethod.Post;\n        options.url = url;\n        options.params = params;\n        options.data = data;\n        options.headers = headers;\n        options.contentType = contentType || ApiContentType.Json;\n\n        return this.request(options);\n    }\n\n\n    private request(options: ApiGatewayOptions): Observable<any> {\n\n        options.method = (options.method || RequestMethod.Get);\n        options.url = (options.url || \"\");\n        options.headers = (options.headers || {});\n        options.params = (options.params || {});\n        options.data = (options.data || {});\n\n        this.interpolateUrl(options);\n        this.addXsrfToken(options);\n        this.addBearJwtToken(options);\n\n        this.addContentType(options);\n\n        let requestOptions = new RequestOptions();\n        requestOptions.method = options.method;\n        requestOptions.url = options.url;\n        requestOptions.headers = <Headers> options.headers;\n        requestOptions.search = this.buildUrlSearchParams(options.params);\n        requestOptions.body = JSON.stringify(options.data);\n        if (options.method == RequestMethod.Post) {\n            requestOptions.body = requestOptions.search + '&' + this.buildUrlSearchParams(options.data);\n            requestOptions.search = null;\n        }\n\n        let isCommand = (options.method !== RequestMethod.Get);\n\n        if (isCommand) {\n            this.pendingCommandsSubject.next(++this.pendingCommandCount);\n        }\n\n        let stream = this.http.request(options.url, requestOptions)\n            .catch((error: any) => {\n                console.log(error);\n                this.errorsSubject.next(error);\n                return Observable.throw(error);\n            })\n            .map(this.unwrapHttpValue)\n            .catch((error: any) => {\n                return Observable.throw(this.unwrapHttpError(error));\n            })\n            .finally(() => {\n                if (isCommand) {\n                    this.pendingCommandsSubject.next(--this.pendingCommandCount);\n                }\n            });\n\n        return stream;\n    }\n\n\n    private addContentType(options: ApiGatewayOptions): ApiGatewayOptions {\n        switch (options.contentType) {\n            case  ApiContentType.WwwForm:\n                options.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n                break;\n            default:\n            case ApiContentType.Json:\n                options.headers[\"Content-Type\"] = \"application/json; charset=UTF-8\";\n                break;\n        }\n        return options;\n    }\n\n    private extractValue(collection: any, key: string): any {\n        var value = collection[key];\n        delete (collection[key]);\n        return value;\n    }\n\n    private addXsrfToken(options: ApiGatewayOptions): ApiGatewayOptions {\n        var xsrfToken = this.getXsrfCookie();\n        if (xsrfToken) {\n            options.headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n        }\n        return options;\n    }\n\n    private  addBearJwtToken(options: ApiGatewayOptions): ApiGatewayOptions {\n        var authToken = this.UserAuthToken;\n        if (authToken)\n            options.headers[\"Authorization\"] = \"Bearer \" + authToken;\n        return options;\n    }\n\n\n    private getXsrfCookie(): string {\n        var matches = document.cookie.match(/\\bXSRF-TOKEN=([^\\s;]+)/);\n        try {\n            return (matches && decodeURIComponent(matches[1]));\n        } catch (decodeError) {\n            return (\"\");\n        }\n    }\n\n    private buildUrlSearchParams(params: any): URLSearchParams {\n        var searchParams = new URLSearchParams();\n        for (var key in params) {\n            searchParams.append(key, params[key])\n        }\n        return searchParams;\n    }\n\n    private interpolateUrl(options: ApiGatewayOptions): ApiGatewayOptions {\n        var isHttp = options.url.toLowerCase().startsWith('http://');\n        var isHttps = options.url.toLowerCase().startsWith('https://');\n        var isDefaultProtocol = options.url.toLowerCase().startsWith('//');\n\n        if (isHttp)\n            options.url = options.url.substring(7);\n        else if (isHttps)\n            options.url = options.url.substring(8);\n        else if (isDefaultProtocol)\n            options.url = options.url.substring(2);\n\n        options.url = options.url.replace(\n            /:([a-zA-Z]+[\\w-]*)/g,\n            ($0, token) => {\n                // Try to move matching token from the params collection.\n                if (options.params.hasOwnProperty(token)) {\n                    return (this.extractValue(options.params, token));\n                }\n                // Try to move matching token from the data collection.\n                if (options.data.hasOwnProperty(token)) {\n                    return (this.extractValue(options.data, token));\n                }\n                // If a matching value couldn't be found, just replace\n                // the token with the empty string.\n                return (\"\");\n            }\n        );\n        // Clean up any repeating slashes.\n        options.url = options.url.replace(/\\/{2,}/g, \"/\");\n        // Clean up any trailing slashes.\n        options.url = options.url.replace(/\\/+$/g, \"\");\n        if (isHttp)\n            options.url = 'http://' + options.url;\n        else if (isHttps)\n            options.url = 'https://' + options.url;\n        else if (isDefaultProtocol)\n            options.url = '//' + options.url;\n\n        return options;\n    }\n\n    private unwrapHttpError(error: any): any {\n        try {\n            return (error.json());\n        } catch (jsonError) {\n            return ({\n                code: -1,\n                message: \"An unexpected error occurred.\"\n            });\n        }\n    }\n\n    private unwrapHttpValue(value: Response): any {\n        return (value.json());\n    }\n\n}"]}