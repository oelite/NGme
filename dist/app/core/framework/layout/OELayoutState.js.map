{"version":3,"file":"OELayoutState.js","sourceRoot":"","sources":["../../../../Volumes/Data/OElite/cosmos/public/OEme/tmp/broccoli_type_script_compiler-input_base_path-1mTS1K7M.tmp/0/src/app/core/framework/layout/OELayoutState.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAAuC,eAAe,CAAC,CAAA;AAGvD;IACI,6BAAmB,MAAc,EAAS,mBAAmC;QAA1D,WAAM,GAAN,MAAM,CAAQ;QAAS,wBAAmB,GAAnB,mBAAmB,CAAgB;IAC7E,CAAC;IACL,0BAAC;AAAD,CAAC,AAHD,IAGC;AAHY,2BAAmB,sBAG/B,CAAA;AAID;IAKI;QACI,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,mBAAmB,GAAG,IAAI,mBAAY,EAAuB,CAAC;IACvE,CAAC;IAEM,gCAAQ,GAAf,UAAgB,aAA4B,EAAE,MAAc;QACxD,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC;IAEhD,CAAC;IAEM,gCAAQ,GAAf,UAAgB,UAA0B,EAAE,MAAc;QACtD,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC;YAC7D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;QAC/E,CAAC;IACL,CAAC;IAGD,kCAAU,GAAV,UAAW,SAAyB;QAChC,MAAM,CAAC,SAAS,IAAI,IAAI,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC;IACvD,CAAC;IA/BL;QAAC,iBAAU,EAAE;;qBAAA;IAiCb,oBAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,qBAAa,gBA+BzB,CAAA","sourcesContent":["/**\n * Created by mleader1 on 29/06/2016.\n */\nimport {Injectable, EventEmitter} from \"@angular/core\";\nimport {OELayoutConfig, LayoutSection} from \"./OELayoutConfig\";\n\nexport class OELayoutStateChange {\n    constructor(public viewId: string, public updatedLayoutConfig: OELayoutConfig) {\n    }\n}\n\n@Injectable()\n//extend OELayoutState if your class is specifically used for defining a layout\nexport class OELayoutState {\n    public layouts: Array<OELayoutConfig>;\n\n    public rootLayoutsUpdated$: EventEmitter<OELayoutStateChange>;\n\n    constructor() {\n        this.layouts = [];\n        this.rootLayoutsUpdated$ = new EventEmitter<OELayoutStateChange>();\n    }\n\n    public getState(layoutSection: LayoutSection, viewId: string): OELayoutConfig {\n        viewId = viewId || '';\n        return this.layouts[viewId + layoutSection];\n\n    }\n\n    public setState(definition: OELayoutConfig, viewId: string): void {\n        console.log('layout set===>' + viewId);\n        console.log(definition);\n        if (definition) {\n            viewId = viewId || '';\n            this.layouts[viewId + definition.layoutSection] = definition;\n            this.rootLayoutsUpdated$.emit(new OELayoutStateChange(viewId, definition));\n        }\n    }\n\n\n    isViewable(layoutSet: OELayoutConfig): boolean {\n        return layoutSet != null && layoutSet.isViewable();\n    }\n\n}\n"]}