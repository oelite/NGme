{"version":3,"file":"media.js","sourceRoot":"","sources":["../../../../../Volumes/Data/OElite/cosmos/public/OEme/tmp/broccoli_type_script_compiler-input_base_path-7nMsUUjz.tmp/0/src/app/plugins/materials/core/util/media.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by mleader1 on 01/07/2016.\n */\nimport {Injectable, NgZone} from \"@angular/core\";\nimport {ViewportHelper} from \"./viewport\";\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\nimport {Observable} from \"rxjs/Observable\";\n\n\n/**\n * As defined in core/style/variables.scss\n *\n * $layout-breakpoint-xs:     600px !default;\n * $layout-breakpoint-sm:     960px !default;\n * $layout-breakpoint-md:     1280px !default;\n * $layout-breakpoint-lg:     1920px !default;\n *\n */\nexport const MEDIA:any = {\n    'xs': '(max-width: 599px)',\n    'gt-xs': '(min-width: 600px)',\n    'sm': '(min-width: 600px) and (max-width: 959px)',\n    'gt-sm': '(min-width: 960px)',\n    'md': '(min-width: 960px) and (max-width: 1279px)',\n    'gt-md': '(min-width: 1280px)',\n    'lg': '(min-width: 1280px) and (max-width: 1919px)',\n    'gt-lg': '(min-width: 1920px)',\n    'xl': '(min-width: 1920px)'\n};\n\nexport const MEDIA_PRIORITY:any = [\n    'xl',\n    'gt-lg',\n    'lg',\n    'gt-md',\n    'md',\n    'gt-sm',\n    'sm',\n    'gt-xs',\n    'xs'\n];\n\n/**\n * Reference to a Media query listener. When you are done with it, call the `destroy` method\n * to release its reference.\n */\nexport class MediaListener {\n\n    /**\n     * Emits when the query that this is listening for changes.\n     */\n    onMatched:Observable<MediaQueryList> = new BehaviorSubject<MediaQueryList>(this.mql);\n\n    /**\n     * Determine if this query is currently matched by the viewport.\n     * @returns {boolean} True if the query is matched.\n     */\n    get matches():boolean {\n        return !this._destroyed && this.mql.matches;\n    }\n\n    private _destroyed:boolean = false;\n\n    private _listener:MediaQueryListListener;\n\n    constructor(public query:string,\n                private zone:NgZone,\n                private mql:MediaQueryList,\n                private media:Media) {\n        const subject = this.onMatched as BehaviorSubject<MediaQueryList>;\n        this._listener = (mql:MediaQueryList) => {\n            zone.run(() => subject.next(mql));\n        };\n        this.mql.addListener(this._listener);\n    }\n\n    /**\n     * Destroy and unhook this listener.\n     */\n    destroy() {\n        if (!this._destroyed) {\n            this.mql.removeListener(this._listener);\n            this.media.unregisterListener(this);\n            this._destroyed = true;\n            this._listener = null;\n            this.mql = null;\n        }\n    }\n\n}\n\nexport interface IMediaQueryCache {\n    references:number;\n    mql:MediaQueryList;\n}\n\n/**\n * Injectable class for being notified of changes to viewport media queries.\n */\n@Injectable()\nexport class Media {\n\n    cache:{[query:string]:IMediaQueryCache} = {};\n\n    constructor(public viewport:ViewportHelper, private zone:NgZone) {\n\n    }\n\n    listen(query:string):MediaListener {\n        let listener = this.cache[query];\n        if (!listener) {\n            listener = this.cache[query] = {\n                mql: this.viewport.matchMedia(query),\n                references: 0\n            };\n        }\n        listener.references++;\n        return new MediaListener(query, this.zone, listener.mql, this);\n    }\n\n    unregisterListener(listener:MediaListener):void {\n        let cached = this.cache[listener.query];\n        if (cached) {\n            cached.references--;\n            if (cached.references === 0) {\n                delete this.cache[listener.query];\n            }\n        }\n    }\n\n    hasMedia(size:string):boolean {\n        let query = Media.getQuery(size);\n        if (!query) {\n            return false;\n        }\n        return this.viewport.matchMedia(query).matches;\n    }\n\n    static getQuery(size:string):string {\n        let query = MEDIA[size];\n        if (!query) {\n            console.warn(`unknown media query size ${size}. Expected one of [${MEDIA_PRIORITY.join(',')}]`);\n            return null;\n        }\n        return query;\n    }\n\n}\n"]}