{"version":3,"file":"button-toggle.spec.js","sourceRoot":"","sources":["../../Volumes/Data/Projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2hfWF0qf.tmp/0/src/demo-app/components/button-toggle/button-toggle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  beforeEach,\n  beforeEachProviders,\n  inject,\n  async,\n  fakeAsync,\n  tick,\n} from '@angular/core/testing';\nimport {NgControl, disableDeprecatedForms, provideForms} from '@angular/forms';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {Component, DebugElement, provide} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {\n  MD_BUTTON_TOGGLE_DIRECTIVES,\n  MdButtonToggleGroup,\n  MdButtonToggle,\n  MdButtonToggleGroupMultiple,\n  MdButtonToggleChange,\n} from './button-toggle';\nimport {\n  MdUniqueSelectionDispatcher\n} from '@angular2-material/core/coordination/unique-selection-dispatcher';\n\n\ndescribe('MdButtonToggle', () => {\n  let builder: TestComponentBuilder;\n  let dispatcher: MdUniqueSelectionDispatcher;\n\n  beforeEachProviders(() => [\n    disableDeprecatedForms(),\n    provideForms(),\n    provide(MdUniqueSelectionDispatcher, {useFactory: () => {\n      dispatcher = new MdUniqueSelectionDispatcher();\n      return dispatcher;\n    }})\n  ]);\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  describe('inside of an exclusive selection group', () => {\n    let fixture: ComponentFixture<ButtonTogglesInsideButtonToggleGroup>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let buttonToggleNativeElements: HTMLElement[];\n    let groupInstance: MdButtonToggleGroup;\n    let buttonToggleInstances: MdButtonToggle[];\n    let testComponent: ButtonTogglesInsideButtonToggleGroup;\n\n    beforeEach(async(() => {\n      builder.createAsync(ButtonTogglesInsideButtonToggleGroup).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdButtonToggleGroup));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdButtonToggleGroup);\n\n        buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MdButtonToggle));\n        buttonToggleNativeElements =\n            buttonToggleDebugElements.map(debugEl => debugEl.nativeElement);\n        buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n      });\n    }));\n\n    it('should set individual button toggle names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should disable click interactions when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      buttonToggleNativeElements[0].click();\n      expect(buttonToggleInstances[0].checked).toBe(false);\n    });\n\n    it('should update the group value when one of the toggles changes', () => {\n      expect(groupInstance.value).toBeFalsy();\n      let nativeCheckboxLabel = buttonToggleDebugElements[0].query(By.css('label')).nativeElement;\n\n      nativeCheckboxLabel.click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n    });\n\n    it('should update the group and toggles when one of the button toggles is clicked', () => {\n      expect(groupInstance.value).toBeFalsy();\n      let nativeCheckboxLabel = buttonToggleDebugElements[0].query(By.css('label')).nativeElement;\n\n      nativeCheckboxLabel.click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(buttonToggleInstances[1].checked).toBe(false);\n\n      let nativeCheckboxLabel2 = buttonToggleDebugElements[1].query(By.css('label')).nativeElement;\n\n      nativeCheckboxLabel2.click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test2');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[1]);\n      expect(buttonToggleInstances[0].checked).toBe(false);\n      expect(buttonToggleInstances[1].checked).toBe(true);\n    });\n\n    it('should check a button toggle upon interaction with underlying native radio button', () => {\n      let nativeRadioInput = buttonToggleDebugElements[0].query(By.css('input')).nativeElement;\n\n      nativeRadioInput.click();\n      fixture.detectChanges();\n\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(groupInstance.value);\n    });\n\n    it('should emit a change event from button toggles', fakeAsync(() => {\n      expect(buttonToggleInstances[0].checked).toBe(false);\n\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\n      buttonToggleInstances[0].change.subscribe(changeSpy);\n\n      buttonToggleInstances[0].checked = true;\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n\n      buttonToggleInstances[0].checked = false;\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should emit a change event from the button toggle group', fakeAsync(() => {\n      expect(groupInstance.value).toBeFalsy();\n\n      let changeSpy = jasmine.createSpy('button-toggle-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n\n      groupInstance.value = 'test1';\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n\n      groupInstance.value = 'test2';\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should update the group and button toggles when updating the group value', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      testComponent.groupValue = 'test1';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(buttonToggleInstances[1].checked).toBe(false);\n\n      testComponent.groupValue = 'test2';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test2');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[1]);\n      expect(buttonToggleInstances[0].checked).toBe(false);\n      expect(buttonToggleInstances[1].checked).toBe(true);\n    });\n\n    it('should deselect all of the checkboxes when the group value is cleared', () => {\n      buttonToggleInstances[0].checked = true;\n\n      expect(groupInstance.value).toBeTruthy();\n\n      groupInstance.value = null;\n\n      expect(buttonToggleInstances.every(toggle => !toggle.checked)).toBe(true);\n    });\n  });\n\n  describe('button toggle group with ngModel', () => {\n    let fixture: ComponentFixture<ButtonToggleGroupWithNgModel>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let buttonToggleNativeElements: HTMLElement[];\n    let groupInstance: MdButtonToggleGroup;\n    let buttonToggleInstances: MdButtonToggle[];\n    let testComponent: ButtonToggleGroupWithNgModel;\n    let groupNgControl: NgControl;\n\n    beforeEach(async(() => {\n      builder.createAsync(ButtonToggleGroupWithNgModel).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdButtonToggleGroup));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdButtonToggleGroup);\n        groupNgControl = groupDebugElement.injector.get(NgControl);\n\n        buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MdButtonToggle));\n        buttonToggleNativeElements =\n            buttonToggleDebugElements.map(debugEl => debugEl.nativeElement);\n        buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n      });\n    }));\n\n    it('should set individual radio names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.name).toBe(groupInstance.name);\n      }\n\n      groupInstance.name = 'new name';\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should check the corresponding button toggle on a group value change', () => {\n      expect(groupInstance.value).toBeFalsy();\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.checked).toBeFalsy();\n      }\n\n      groupInstance.value = 'red';\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.checked).toBe(groupInstance.value === buttonToggle.value);\n      }\n      expect(groupInstance.selected.value).toBe(groupInstance.value);\n    });\n\n    it('should have the correct ngControl state initially and after interaction', fakeAsync(() => {\n      expect(groupNgControl.valid).toBe(true);\n      expect(groupNgControl.pristine).toBe(true);\n      expect(groupNgControl.touched).toBe(false);\n\n      buttonToggleInstances[1].checked = true;\n      fixture.detectChanges();\n      tick();\n\n      expect(groupNgControl.valid).toBe(true);\n      expect(groupNgControl.pristine).toBe(false);\n      expect(groupNgControl.touched).toBe(false);\n\n      let nativeRadioLabel = buttonToggleDebugElements[2].query(By.css('label')).nativeElement;\n      nativeRadioLabel.click();\n      fixture.detectChanges();\n      tick();\n\n      expect(groupNgControl.valid).toBe(true);\n      expect(groupNgControl.pristine).toBe(false);\n      expect(groupNgControl.touched).toBe(true);\n    }));\n\n    it('should update the ngModel value when selecting a button toggle', fakeAsync(() => {\n      buttonToggleInstances[1].checked = true;\n      fixture.detectChanges();\n\n      tick();\n\n      expect(testComponent.modelValue).toBe('green');\n    }));\n  });\n\n  describe('button toggle group with ngModel and change event', () => {\n    let fixture: ComponentFixture<ButtonToggleGroupWithNgModel>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let buttonToggleNativeElements: HTMLElement[];\n    let groupInstance: MdButtonToggleGroup;\n    let buttonToggleInstances: MdButtonToggle[];\n    let testComponent: ButtonToggleGroupWithNgModel;\n    let groupNgControl: NgControl;\n\n    beforeEach(async(() => {\n      builder.createAsync(ButtonToggleGroupWithNgModel).then(f => {\n        fixture = f;\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdButtonToggleGroup));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdButtonToggleGroup);\n        groupNgControl = groupDebugElement.injector.get(NgControl);\n\n        buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MdButtonToggle));\n        buttonToggleNativeElements =\n            buttonToggleDebugElements.map(debugEl => debugEl.nativeElement);\n        buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n\n        fixture.detectChanges();\n      });\n    }));\n\n    it('should update the model before firing change event', fakeAsync(() => {\n      expect(testComponent.modelValue).toBeUndefined();\n      expect(testComponent.lastEvent).toBeUndefined();\n\n      groupInstance.value = 'red';\n      fixture.detectChanges();\n\n      tick();\n      expect(testComponent.modelValue).toBe('red');\n      expect(testComponent.lastEvent.value).toBe('red');\n    }));\n  });\n\n  describe('inside of a multiple selection group', () => {\n    let fixture: ComponentFixture<ButtonTogglesInsideButtonToggleGroupMultiple>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let buttonToggleNativeElements: HTMLElement[];\n    let groupInstance: MdButtonToggleGroupMultiple;\n    let buttonToggleInstances: MdButtonToggle[];\n    let testComponent: ButtonTogglesInsideButtonToggleGroupMultiple;\n\n    beforeEach(async(() => {\n      builder.createAsync(ButtonTogglesInsideButtonToggleGroupMultiple).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdButtonToggleGroupMultiple));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdButtonToggleGroupMultiple);\n\n        buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MdButtonToggle));\n        buttonToggleNativeElements =\n            buttonToggleDebugElements.map(debugEl => debugEl.nativeElement);\n        buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n      });\n    }));\n\n    it('should disable click interactions when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      buttonToggleNativeElements[0].click();\n      expect(buttonToggleInstances[0].checked).toBe(false);\n    });\n\n    it('should check a button toggle when clicked', () => {\n      expect(buttonToggleInstances.every(buttonToggle => !buttonToggle.checked)).toBe(true);\n\n      let nativeCheckboxLabel = buttonToggleDebugElements[0].query(By.css('label')).nativeElement;\n\n      nativeCheckboxLabel.click();\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should allow for multiple toggles to be selected', () => {\n      buttonToggleInstances[0].checked = true;\n      fixture.detectChanges();\n      expect(buttonToggleInstances[0].checked).toBe(true);\n\n      buttonToggleInstances[1].checked = true;\n      fixture.detectChanges();\n      expect(buttonToggleInstances[1].checked).toBe(true);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should check a button toggle upon interaction with underlying native checkbox', () => {\n      let nativeCheckboxInput = buttonToggleDebugElements[0].query(By.css('input')).nativeElement;\n\n      nativeCheckboxInput.click();\n      fixture.detectChanges();\n\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should deselect a button toggle when selected twice', () => {\n      buttonToggleNativeElements[0].click();\n      fixture.detectChanges();\n\n      buttonToggleNativeElements[0].click();\n      fixture.detectChanges();\n\n      expect(buttonToggleInstances[0].checked).toBe(false);\n    });\n  });\n\n  describe('as standalone', () => {\n    let fixture: ComponentFixture<StandaloneButtonToggle>;\n    let buttonToggleDebugElement: DebugElement;\n    let buttonToggleNativeElement: HTMLElement;\n    let buttonToggleInstance: MdButtonToggle;\n    let testComponent: StandaloneButtonToggle;\n\n    beforeEach(async(() => {\n      builder.createAsync(StandaloneButtonToggle).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        buttonToggleDebugElement = fixture.debugElement.query(By.directive(MdButtonToggle));\n        buttonToggleNativeElement = buttonToggleDebugElement.nativeElement;\n        buttonToggleInstance = buttonToggleDebugElement.componentInstance;\n      });\n    }));\n\n    it('should toggle when clicked', () => {\n      let nativeCheckboxLabel = buttonToggleDebugElement.query(By.css('label')).nativeElement;\n\n      nativeCheckboxLabel.click();\n\n      fixture.detectChanges();\n\n      expect(buttonToggleInstance.checked).toBe(true);\n\n      nativeCheckboxLabel.click();\n      fixture.detectChanges();\n\n      expect(buttonToggleInstance.checked).toBe(false);\n    });\n  });\n});\n\n\n@Component({\n  directives: [MD_BUTTON_TOGGLE_DIRECTIVES],\n  template: `\n  <md-button-toggle-group [disabled]=\"isGroupDisabled\" [value]=\"groupValue\">\n    <md-button-toggle value=\"test1\">Test1</md-button-toggle>\n    <md-button-toggle value=\"test2\">Test2</md-button-toggle>\n    <md-button-toggle value=\"test3\">Test3</md-button-toggle>\n  </md-button-toggle-group>\n  `\n})\nclass ButtonTogglesInsideButtonToggleGroup {\n  isGroupDisabled: boolean = false;\n  groupValue: string = null;\n}\n\n@Component({\n  directives: [MD_BUTTON_TOGGLE_DIRECTIVES],\n  template: `\n  <md-button-toggle-group [(ngModel)]=\"modelValue\" (change)=\"lastEvent = $event\">\n    <md-button-toggle *ngFor=\"let option of options\" [value]=\"option.value\">\n      {{option.label}}\n    </md-button-toggle>\n  </md-button-toggle-group>\n  `\n})\nclass ButtonToggleGroupWithNgModel {\n  modelValue: string;\n  options = [\n    {label: 'Red', value: 'red'},\n    {label: 'Green', value: 'green'},\n    {label: 'Blue', value: 'blue'},\n  ];\n  lastEvent: MdButtonToggleChange;\n}\n\n@Component({\n  directives: [MD_BUTTON_TOGGLE_DIRECTIVES],\n  template: `\n  <md-button-toggle-group [disabled]=\"isGroupDisabled\" multiple>\n    <md-button-toggle value=\"eggs\">Eggs</md-button-toggle>\n    <md-button-toggle value=\"flour\">Flour</md-button-toggle>\n    <md-button-toggle value=\"sugar\">Sugar</md-button-toggle>\n  </md-button-toggle-group>\n  `\n})\nclass ButtonTogglesInsideButtonToggleGroupMultiple {\n  isGroupDisabled: boolean = false;\n}\n\n@Component({\n  directives: [MD_BUTTON_TOGGLE_DIRECTIVES],\n  template: `\n  <md-button-toggle>Yes</md-button-toggle>\n  `\n})\nclass StandaloneButtonToggle { }\n"]}