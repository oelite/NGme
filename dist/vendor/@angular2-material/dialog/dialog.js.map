{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../Volumes/Data/Projects/material2/tmp/broccoli_type_script_compiler-input_base_path-ktQv7u4s.tmp/0/src/demo-app/components/dialog/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule, Injector, ComponentRef, Injectable} from '@angular/core';\nimport {\n  Overlay,\n  OverlayModule,\n  PortalModule,\n  OverlayRef,\n  OverlayState,\n  ComponentPortal,\n} from '@angular2-material/core/core';\nimport {ComponentType} from '@angular2-material/core/overlay/generic-component-type';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogContainer} from './dialog-container';\n\nexport {MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\n\n// TODO(jelbourn): add shortcuts for `alert` and `confirm`.\n// TODO(jelbourn): add support for opening with a TemplateRef\n// TODO(jelbourn): add `closeAll` method\n// TODO(jelbourn): add backdrop\n// TODO(jelbourn): default dialog config\n// TODO(jelbourn): focus trapping\n// TODO(jelbourn): potentially change API from accepting component constructor to component factory.\n\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MdDialog {\n  constructor(private _overlay: Overlay, private _injector: Injector) { }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param component Type of the component to load into the load.\n   * @param config\n   */\n  open<T>(component: ComponentType<T>, config: MdDialogConfig): Promise<MdDialogRef<T>> {\n    let overlayRef: OverlayRef;\n\n    return this._createOverlay(config)\n        .then(overlay => overlayRef = overlay)\n        .then(overlay => this._attachDialogContainer(overlay, config))\n        .then(containerRef => this._attachDialogContent(component, containerRef, overlayRef));\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param dialogConfig The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(dialogConfig: MdDialogConfig): Promise<OverlayRef> {\n    let overlayState = this._getOverlayState(dialogConfig);\n    return this._overlay.create(overlayState);\n  }\n\n  /**\n   * Attaches an MdDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig):\n      Promise<ComponentRef<MdDialogContainer>> {\n    let containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    return overlay.attach(containerPortal).then((containerRef: ComponentRef<MdDialogContainer>) => {\n      // Pass the config directly to the container so that it can consume any relevant settings.\n      containerRef.instance.dialogConfig = config;\n      return containerRef;\n    });\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MdDialogContainer.\n   * @param component The type of component being loaded into the dialog.\n   * @param containerRef Reference to the wrapping MdDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @returns A promise resolving to the MdDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      component: ComponentType<T>,\n      containerRef: ComponentRef<MdDialogContainer>,\n      overlayRef: OverlayRef): Promise<MdDialogRef<T>> {\n    let dialogContainer = containerRef.instance;\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let dialogRef = new MdDialogRef(overlayRef);\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let dialogInjector = new DialogInjector(dialogRef, this._injector);\n\n    let contentPortal = new ComponentPortal(component, null, dialogInjector);\n    return dialogContainer.attachComponentPortal(contentPortal).then(contentRef => {\n      dialogRef.componentInstance = contentRef.instance;\n      return dialogRef;\n    });\n  }\n\n  /**\n   * Creates an overlay state from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let state = new OverlayState();\n\n    state.positionStrategy = this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .centerVertically();\n\n    return state;\n  }\n}\n\n\n@NgModule({\n  imports: [OverlayModule, PortalModule],\n  exports: [MdDialogContainer],\n  declarations: [MdDialogContainer],\n  entryComponents: [MdDialogContainer],\n  providers: [MdDialog],\n})\nexport class MdDialogModule { }\n"]}