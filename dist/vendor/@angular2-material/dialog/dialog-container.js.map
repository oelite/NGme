{"version":3,"file":"dialog-container.js","sourceRoot":"","sources":["../../Volumes/Data/Projects/material2/tmp/broccoli_type_script_compiler-input_base_path-MGzNSvmZ.tmp/0/src/demo-app/components/dialog/dialog-container.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAAgE,eAAe,CAAC,CAAA;AAChF,uBAIO,uCAAuC,CAAC,CAAA;AAC/C,kCAAkC,kDAAkD,CAAC,CAAA;AACrF,kCAA+B,iDAAiD,CAAC,CAAA;AAEjF,8BAAkD,iBAAiB,CAAC,CAAA;AAGpE;;GAEG;AAYH;IAAuC,qCAAc;IAArD;QAAuC,8BAAc;IA2DrD,CAAC;IA3CC,qBAAqB;IACrB,2CAAe,GAAf;QAAA,iBAeC;QAdC,yFAAyF;QACzF,4EAA4E;QAC5E,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,UAAA,YAAY;gBACtE,KAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBAEpD,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;gBAClC,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;YACvC,CAAC,EAAE;gBACD,KAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC;gBACvC,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;gBACrC,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,2DAA2D;IAC3D,iDAAqB,GAArB,UAAyB,MAA0B;QACjD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACnC,MAAM,IAAI,mDAAmC,EAAE,CAAC;YAClD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,wFAAwF;YACxF,0FAA0F;YAC1F,kCAAkC;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAClC,MAAM,IAAI,mDAAmC,EAAE,CAAC;YAClD,CAAC;YAED,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC;YACpC,IAAI,CAAC,wBAAwB,GAAG,IAAI,oCAAgB,EAAE,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,gDAAoB,GAApB,UAAqB,MAAsB;QACzC,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACrC,CAAC;IAxDD;QAAC,gBAAS,CAAC,uCAAmB,CAAC;;0DAAA;IAbjC;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,qBAAqB;YAC/B,WAAW,EAAE,uBAAuB;YACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;YACnC,UAAU,EAAE,CAAC,uCAAmB,CAAC;YACjC,IAAI,EAAE;gBACJ,OAAO,EAAE,qBAAqB;gBAC9B,aAAa,EAAE,oBAAoB;aACpC;SACF,CAAC;;yBAAA;IA4DF,wBAAC;AAAD,CAAC,AA3DD,CAAuC,uBAAc,GA2DpD;AA3DY,yBAAiB,oBA2D7B,CAAA","sourcesContent":["import {Component, ComponentRef, ViewChild, AfterViewInit} from '@angular/core';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from '@angular2-material/core/portal/portal';\nimport {PortalHostDirective} from '@angular2-material/core/portal/portal-directives';\nimport {PromiseCompleter} from '@angular2-material/core/async/promise-completer';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContentAlreadyAttachedError} from './dialog-errors';\n\n\n/**\n * Internal component that wraps user-provided dialog content.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog-container.css'],\n  directives: [PortalHostDirective],\n  host: {\n    'class': 'md-dialog-container',\n    '[attr.role]': 'dialogConfig?.role'\n  }\n})\nexport class MdDialogContainer extends BasePortalHost implements AfterViewInit {\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n  @ViewChild(PortalHostDirective) private _portalHost: PortalHostDirective;\n\n  /**\n   * Completer used to resolve the promise for cases when a portal is attempted to be attached,\n   * but AfterViewInit has not yet occured.\n   */\n  private _deferredAttachCompleter: PromiseCompleter<ComponentRef<any>>;\n\n  /** Portal to be attached upon AfterViewInit. */\n  private _deferredAttachPortal: ComponentPortal<any>;\n\n  /** The dialog configuration. */\n  dialogConfig: MdDialogConfig;\n\n  /** TODO: internal */\n  ngAfterViewInit() {\n    // If there was an attempted call to `attachComponentPortal` before this lifecycle stage,\n    // we actually perform the attachment now that the `@ViewChild` is resolved.\n    if (this._deferredAttachCompleter) {\n      this.attachComponentPortal(this._deferredAttachPortal).then(componentRef => {\n        this._deferredAttachCompleter.resolve(componentRef);\n\n        this._deferredAttachPortal = null;\n        this._deferredAttachCompleter = null;\n      }, () => {\n        this._deferredAttachCompleter.reject();\n        this._deferredAttachCompleter = null;\n        this._deferredAttachPortal = null;\n      });\n    }\n  }\n\n  /** Attach a portal as content to this dialog container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): Promise<ComponentRef<T>> {\n    if (this._portalHost) {\n      if (this._portalHost.hasAttached()) {\n        throw new MdDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalHost.attachComponentPortal(portal);\n    } else {\n      // The @ViewChild query for the portalHost is not resolved until AfterViewInit, but this\n      // function may be called before this lifecycle event. As such, we defer the attachment of\n      // the portal until AfterViewInit.\n      if (this._deferredAttachCompleter) {\n        throw new MdDialogContentAlreadyAttachedError();\n      }\n\n      this._deferredAttachPortal = portal;\n      this._deferredAttachCompleter = new PromiseCompleter();\n      return this._deferredAttachCompleter.promise;\n    }\n  }\n\n  attachTemplatePortal(portal: TemplatePortal): Promise<Map<string, any>> {\n    throw Error('Not yet implemented');\n  }\n}\n"]}